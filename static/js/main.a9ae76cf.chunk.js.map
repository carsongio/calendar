{"version":3,"sources":["logo.svg","components/Breakpoints.js","components/PaddingField.js","components/BoxModelField.js","components/DateRangePickerWrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Breakpoints","props","state","value","handleChange","bind","this","setState","onChange","options","breakpoints","Component","label","PaddingField","selected","map","index","name","optionAttributes","getOptions","placeholder","paddingTypes","defaultProps","autoFocus","autoFocusEndDate","initialStartDate","initialEndDate","startDateId","START_DATE","startDatePlaceholderText","endDateId","END_DATE","endDatePlaceholderText","disabled","required","screenReaderInputMessage","showClearDates","showDefaultInputIcon","customInputIcon","customArrowIcon","customCloseIcon","block","small","regular","renderMonthText","orientation","HORIZONTAL_ORIENTATION","anchorDirection","ANCHOR_LEFT","horizontalMargin","withPortal","withFullScreenPortal","initialVisibleMonth","numberOfMonths","keepOpenOnDateSelect","reopenPickerOnClearDates","isRTL","navPosition","NAV_POSITION_TOP","navPrev","navNext","onPrevMonthClick","onNextMonthClick","onClose","renderCalendarDay","undefined","renderDayContents","minimumNights","enableOutsideDays","isDayBlocked","isOutsideRange","day","isInclusivelyAfterDay","moment","isDayHighlighted","displayFormat","localeData","longDateFormat","monthFormat","phrases","DateRangePickerPhrases","stateDateWrapper","date","DateRangePickerWrapper","focusedInput","startDate","endDate","onDatesChange","onFocusChange","omit","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9ae76cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass Breakpoints extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value) {\n    this.setState({\n      value\n    });\n    //this.props.handleSubmit(this.state);\n  }\n\n  render() {\n    return (\n      <Select\n        value={this.state.value}\n        onChange={this.handleChange}\n        options={this.props.breakpoints}\n      />\n    );\n  }\n}\n\nexport default Breakpoints;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nconst options = [\n  { value: '0', label: '0'},\n  { value: '1', label: '0.25rem' },\n  { value: '2', label: '0.5rem' }\n]\n\nclass PaddingField extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: {}\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value) {\n    this.state.selected = value.value;\n    this.props.handleChange(this.state.selected);\n  }\n\n  getOptions() {\n    return options.map(({value, label}, index) => {\n      return {\n        'value': [this.props.name, value],\n        label: label\n      };\n    });\n  }\n\n  render() {\n    const optionAttributes = this.getOptions()\n    return (\n      <Select\n        placeholder={this.props.placeholder}\n        name={this.name}\n        value={this.state.value}\n        onChange={this.handleChange}\n        options={optionAttributes}\n      />\n    );\n  }\n}\n\nexport default PaddingField;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n//import fieldHolder from 'components/FieldHolder/FieldHolder';\nimport Breakpoints from './Breakpoints';\nimport PaddingField from './PaddingField';\nimport { Field } from 'redux-form'\nimport _ from 'lodash'\n\nclass BoxModelField extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      spacing: []\n    };\n  }\n\n  handleChange(value) {\n    this.pushSpacing(value)\n  }\n\n  pushSpacing(value) {\n    const { spacing } = this.state;\n    var newSpacing = spacing;\n    newSpacing[value[0]] = value[1];\n    //this.setState({spacing: [...this.state.spacing, {value[0]}]});\n  }\n\n  getSpacing() {\n    return JSON.stringify(this.state.spacing)\n  }\n\n  render() {\n    const paddingFields = paddingTypes.map((row, index) => {\n      return breakpoints.map(({value, label}, index)=> {\n        let name = (value==='') ? row : value+\":\"+row\n        return (\n          <PaddingField\n          key={value+\"-\"+row}\n          name={name}\n          placeholder={label+\" \"+row}\n          handleChange={this.handleChange}\n          />\n        );\n      });\n    });\n\n    return (\n      <div>\n        <input\n          type=\"text\"\n          value={this.getSpacing()}\n        />\n        <Breakpoints breakpoints={breakpoints} />\n        {paddingFields}\n      </div>\n    );\n  }\n}\n\nconst paddingTypes = [\n  'pt',\n  'pr',\n  'pb',\n  'pl'\n];\n\nconst breakpoints = [\n  { value: '', label: 'default' },\n  { value: 'sm', label: 'mobile' },\n  { value: 'md', label: 'tablet' },\n  { value: 'lg', label: 'desktop' },\n  { value: 'xl', label: 'wide' }\n]\n\nexport default BoxModelField;\n\n//export { BoxModelField as Component };\n\n//export default fieldHolder(BoxModelField);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport momentPropTypes from 'react-moment-proptypes';\nimport moment from 'moment';\nimport omit from 'lodash/omit';\n\nimport { DateRangePicker, DateRangePickerPhrases, DateRangePickerShape } from 'react-dates';\nimport 'react-dates/lib/css/_datepicker.css';\n\nimport {\n  START_DATE,\n  END_DATE,\n  HORIZONTAL_ORIENTATION,\n  ANCHOR_LEFT,\n  NAV_POSITION_TOP,\n} from 'react-dates';\n\nimport { isInclusivelyAfterDay } from 'react-dates';\n\nconst propTypes = {\n  // example props for the demo\n  autoFocus: PropTypes.bool,\n  autoFocusEndDate: PropTypes.bool,\n  stateDateWrapper: PropTypes.func,\n  initialStartDate: momentPropTypes.momentObj,\n  initialEndDate: momentPropTypes.momentObj,\n\n  ...omit(DateRangePickerShape, [\n    'startDate',\n    'endDate',\n    'onDatesChange',\n    'focusedInput',\n    'onFocusChange',\n  ]),\n};\n\nconst defaultProps = {\n  // example props for the demo\n  autoFocus: false,\n  autoFocusEndDate: false,\n  initialStartDate: null,\n  initialEndDate: null,\n\n  // input related props\n  startDateId: START_DATE,\n  startDatePlaceholderText: 'Start Date',\n  endDateId: END_DATE,\n  endDatePlaceholderText: 'End Date',\n  disabled: false,\n  required: false,\n  screenReaderInputMessage: '',\n  showClearDates: false,\n  showDefaultInputIcon: false,\n  customInputIcon: null,\n  customArrowIcon: null,\n  customCloseIcon: null,\n  block: false,\n  small: false,\n  regular: false,\n\n  // calendar presentation and interaction related props\n  renderMonthText: null,\n  orientation: HORIZONTAL_ORIENTATION,\n  anchorDirection: ANCHOR_LEFT,\n  horizontalMargin: 0,\n  withPortal: false,\n  withFullScreenPortal: false,\n  initialVisibleMonth: null,\n  numberOfMonths: 2,\n  keepOpenOnDateSelect: false,\n  reopenPickerOnClearDates: false,\n  isRTL: false,\n\n  // navigation related props\n  navPosition: NAV_POSITION_TOP,\n  navPrev: null,\n  navNext: null,\n  onPrevMonthClick() {},\n  onNextMonthClick() {},\n  onClose() {},\n\n  // day presentation and interaction related props\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  minimumNights: 10,\n  enableOutsideDays: false,\n  isDayBlocked: () => false,\n  isOutsideRange: day => !isInclusivelyAfterDay(day, moment()),\n  isDayHighlighted: () => false,\n\n  // internationalization\n  displayFormat: () => moment.localeData().longDateFormat('L'),\n  monthFormat: 'MMMM YYYY',\n  phrases: DateRangePickerPhrases,\n\n  stateDateWrapper: date => date,\n};\n\nclass DateRangePickerWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let focusedInput = null;\n    if (props.autoFocus) {\n      focusedInput = START_DATE;\n    } else if (props.autoFocusEndDate) {\n      focusedInput = END_DATE;\n    }\n\n    this.state = {\n      focusedInput,\n      startDate: props.initialStartDate,\n      endDate: props.initialEndDate,\n    };\n\n    this.onDatesChange = this.onDatesChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n  onDatesChange({ startDate, endDate }) {\n    const { stateDateWrapper } = this.props;\n    this.setState({\n      startDate: startDate && stateDateWrapper(startDate),\n      endDate: endDate && stateDateWrapper(endDate),\n    });\n  }\n\n  onFocusChange(focusedInput) {\n    this.setState({ focusedInput });\n  }\n\n  render() {\n    const { focusedInput, startDate, endDate } = this.state;\n\n    // autoFocus, autoFocusEndDate, initialStartDate and initialEndDate are helper props for the\n    // example wrapper but are not props on the SingleDatePicker itself and\n    // thus, have to be omitted.\n    const props = omit(this.props, [\n      'autoFocus',\n      'autoFocusEndDate',\n      'initialStartDate',\n      'initialEndDate',\n      'stateDateWrapper',\n    ]);\n\n    return (\n      <div>\n        <DateRangePicker\n          {...props}\n          onDatesChange={this.onDatesChange}\n          onFocusChange={this.onFocusChange}\n          focusedInput={focusedInput}\n          startDate={startDate}\n          endDate={endDate}\n        />\n      </div>\n    );\n  }\n}\n\nDateRangePickerWrapper.propTypes = propTypes;\nDateRangePickerWrapper.defaultProps = defaultProps;\n\nexport default DateRangePickerWrapper;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BoxModelField from './components/BoxModelField.js';\nimport 'react-dates/initialize';\n\nimport DateRangePickerWrapper from './components/DateRangePickerWrapper.js'\n\nclass App extends React.Component {\n    constructor(props) {\n    super(props);\n  }\n  render() {\n      return (\n        <div className=\"App\">\n            <DateRangePickerWrapper />\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}